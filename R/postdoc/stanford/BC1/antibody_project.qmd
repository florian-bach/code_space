---
title: "BC1 Antibody Study"
format: pdf
page-layout: article
theme: robobook
width: 10
editor: visual
wrap: auto
fig-format: png
fig-align: "left"
code-fold: true
---

## The dataset

Plasma samples were taken from chord blood, at 6 months and 12 months to quantify antimalarial antibodies. Of the 189 children 168 full time courses are available, 15 kids miss one sample, 6 miss two. 21 antibodies were quantified, including two against vaccine antigens Tetanus toxoid and *Staphylococcus* enterotoxin A. The remaining antibodies are all against asexual parasite stages, except $\alpha$CSP.

```{r}
#| label: load libraries & data
#| warning: false
library(dplyr)
library(patchwork)
library(tidyr)
library(ggplot2)
library(lme4)


bc1 <- haven::read_dta("~/postdoc/stanford/clinical_data/BC1/MergedAntibodyData_ChildClinical.dta")

time_palette <- colorspace::sequential_hcl(n=4, "RdPu")[1:3]

pc1_cols <- colorspace::sequential_hcl(21, palette = "Purple Yellow")

#downsize df
ab_columns <- grep("log", colnames(bc1), value = TRUE)
demo_columns <- c("id",
                  "wealthcat",
                  "age",
                  "totalmalariapreg",
                  "anymalariapreg",
                  "gender",
                  "gestage",
                  "anyparasitemia",
                  "timepoint",
                  "MomFinalRx",
                  "nonmalariafebrile",
                  "ChildFinalRx")

slimmer_bc <- bc1 %>%
  dplyr::select(c(demo_columns, ab_columns)) %>%
  dplyr::select(-c("logpd", "logGST")) %>%
  na.omit() %>%
  mutate(id=as.character(id))

```

As a first exploration of the data I decided to run a PCA.

```{r}
#| label: all sample PCA
#| fig-cap: All sample PCA
#| fig-width: 7
#| fig-height: 7

# all data PCA ####
big_pca <-  prcomp(slimmer_bc[,grep("log", colnames(slimmer_bc), value = TRUE)], center = T)

pca_plot_data <- as.data.frame(cbind(slimmer_bc, big_pca$x))


ggplot(pca_plot_data, aes(x=PC1, y=PC2, color=factor(timepoint)))+
  geom_point()+
  xlab(paste("PC1 ", data.frame(summary(big_pca)[6])[2,1]*100, "%", sep = ""))+
  ylab(paste("PC2 ", data.frame(summary(big_pca)[6])[2,2]*100, "%", sep = ""))+
  theme_minimal()+
  guides(color=guide_legend(title = "Timepoint"))+
  scale_color_manual(values = time_palette)+
  ggtitle("Antibody Titre PCA")

```

I checked the distribution of `w`ealthcat, age, totalmalariapreg, anymalariapreg, gender, gestage, anyparasitemia, timepoint, MomFinalRx, nonmalariafebrile, ChildFinalRx the only demographic variable that was reflected in the PCA was timepoint. Because so much of the variance appeared to relate to timepoint, I decided to rerun the PCA on each timepoint separately.

```{r}
#| label: per sample PCA
#| layout-nrow: 2
#| fig-width: 9
#| fig-height: 7
#| out-width: 150%
#| fig-cap: 
#|   - "Per-Sample PCA"
#|   - "PC1 Loadings Per Timepoint"

list_of_dfs <- split(slimmer_bc, slimmer_bc$timepoint)

list_of_pca <-  lapply(list_of_dfs, function(x) prcomp(x[,grep("log", colnames(x), value = TRUE)], center = T))

list_of_plot_data <- lapply(1:3, function(y) as.data.frame(cbind(list_of_dfs[[y]], list_of_pca[[y]]$x)))

loadings_theme <- theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5))

t1 <- ggplot(list_of_plot_data[[1]], aes(x=PC1, y=PC2, color=logMSP1))+
  geom_point()+
  xlab(paste("PC1 ", data.frame(summary(list_of_pca[[1]])[6])[2,1]*100, "%", sep = ""))+
  ylab(paste("PC2 ", data.frame(summary(list_of_pca[[1]])[6])[2,2]*100, "%", sep = ""))+
  theme_minimal()+
  loadings_theme+
  viridis::scale_color_viridis(option="B")+
  #ggrepel::geom_label_repel(aes_string(label = "id"), show.legend = FALSE)+ 
  ggtitle("T1")

t2 <- ggplot(list_of_plot_data[[2]], aes(x=PC1, y=PC2, color=logMSP1))+
  geom_point()+
  xlab(paste("PC1 ", data.frame(summary(list_of_pca[[2]])[6])[2,1]*100, "%", sep = ""))+
  ylab(paste("PC2 ", data.frame(summary(list_of_pca[[2]])[6])[2,2]*100, "%", sep = ""))+
  theme_minimal()+
  loadings_theme+
  viridis::scale_color_viridis(option="B")+
  #ggrepel::geom_label_repel(aes_string(label = "id"), show.legend = FALSE)+ 
  ggtitle("T2")

t3 <- ggplot(list_of_plot_data[[3]], aes(x=PC1, y=PC2, color=logMSP1))+
  geom_point()+
  xlab(paste("PC1 ", data.frame(summary(list_of_pca[[3]])[6])[2,1]*100, "%", sep = ""))+
  ylab(paste("PC2 ", data.frame(summary(list_of_pca[[3]])[6])[2,2]*100, "%", sep = ""))+
  theme_minimal()+
  loadings_theme+
  viridis::scale_color_viridis(option="B")+
  #ggrepel::geom_label_repel(aes_string(label = "id"), show.legend = FALSE)+ 
  ggtitle("T3")


list_of_loadings_df <- lapply(list_of_pca, function(x) data.frame(x$rotation))

list_of_pc123 <- lapply(1:3, function(x) cbind(rownames(list_of_loadings_df[[x]]),
                                               list_of_loadings_df[[x]]$PC1,
                                               list_of_loadings_df[[x]]$PC2,
                                               list_of_loadings_df[[x]]$PC3,
                                               rep(names(list_of_pca[x]), length(list_of_loadings_df[[x]]))))

pc123 <- as.matrix(do.call(rbind, list_of_pc123))
colnames(pc123) <- c("antibody", "PC1", "PC2", "PC3", "timepoint")

class(pc123[,2:5]) <- "numeric"
pc123 <- as.data.frame(pc123)


pc123$PC1 <- as.numeric(pc123$PC1)
pc123$PC2 <- as.numeric(pc123$PC2)
pc123$PC3 <- as.numeric(pc123$PC3)


ggplot(pc123, aes(x=tidytext::reorder_within(antibody, PC1, timepoint, mean), y=PC1, fill=antibody))+
  geom_bar(stat = "identity")+
  facet_wrap(~timepoint, scales = "free_x")+
  scale_fill_manual(values = pc1_cols)+
  theme_minimal()+
  tidytext::scale_x_reordered()+
  theme(axis.title.x = element_blank(),
        axis.text.x = element_text(angle = 90, hjust=1),
        legend.position = "none",
        axis.text.y = element_blank())

t1+t2+t3
```

PC1 explained much more of the variance and for each timepoint PC1 loadings are dominated by MSP1. MSP2, Etramp4 and EBA75 also account for a lot of variance. The individual PCAs above are colored by MSP1.

To look at this more quantitatively I decided to do linear regression on each antibody through time. First, a quick look at the data so we know what to expect:

```{r}
#| label: violin plots of data
#| fig-width: 9
#| fig-height: 7
#| out-width: 150%
#| fig-cap: "Antibody Titres Per Timepoint"

ginormous_df <- slimmer_bc %>%
  mutate(timepoint=ifelse(timepoint==1, "1st", ifelse(timepoint==2, "2nd", "3rd"))) %>%
  pivot_longer(cols = (length(demo_columns)+1):ncol(slimmer_bc), names_to = "antibody", values_to = "log_conc") %>%
  group_by(antibody)

ggplot(ginormous_df, aes(x=timepoint, y=10^(log_conc)))+
  facet_wrap(~antibody, scales = "free")+
  geom_violin(aes(fill=antibody), draw_quantiles = c(0.25, 0.5, 0.75))+
  scale_y_log10()+
  theme_minimal()+
  scale_color_manual(values=pc1_cols)+
  scale_fill_manual(values=pc1_cols)+
  xlab("")+
  ylab("Concentration")+
  theme(axis.text.x = element_text(angle = 90, hjust=1),
        legend.position = "none")


```

Looks like most antibodies are present at higher titres at timepoint 1 compared to the other two. I will use a linear mixed effects model to predict log-titres by categorical timepoint.

```{r}
#| label: making mixed effects models
#| warning: false
# split big dataframe into 22 dataframes, one for each antibody


list_of_dfs <- split(ginormous_df, ginormous_df$antibody)

# run a model for each with id as random effect
list_of_models <- lapply(list_of_dfs, function(x) lmer(log_conc~timepoint+(1|id), data=x, REML = TRUE))

# define conrtrasts
sec_contrast <- t(matrix(c(0,1,0)))
ter_contrast <- t(matrix(c(0,0,1)))
sec_ter_contrast <- t(matrix(c(0,-1,1)))

#"linear hypothesis testing"
list_of_tests <- lapply(list_of_models, function(x) multcomp::glht(x, sec_ter_contrast))
list_of_pvalues <- sapply(list_of_tests, function(x) summary(x)$test$pvalues)
#
#
list_of_adj_pvalues <- sort(p.adjust(list_of_pvalues, method = "fdr"))

#all sic at 2nd and 3rd relative to first; 12/22 from 2nd to 3rd
# table(list_of_adj_pvalues<0.05) 
sig_2_3_abs <- subset(list_of_adj_pvalues, list_of_adj_pvalues<0.05)

# make results table
list_of_coefficients <- lapply(list_of_models, function(x)coef(x)$id[1,])
coefficient_df <- do.call(rbind,list_of_coefficients)
coefficient_df$ab <- rownames(coefficient_df)
coefficient_df$raw_p <- list_of_pvalues[coefficient_df$ab]
coefficient_df$p_adj <- list_of_adj_pvalues[coefficient_df$ab]

coef_df <- data.frame("ab"=gsub("log", "", coefficient_df$ab),
                      "coef_t2"=coefficient_df$timepoint2nd,
                      "coef_t3"=coefficient_df$timepoint3rd,
                      "coef_t2_t3"=-coefficient_df$timepoint2nd+coefficient_df$timepoint3rd,
                      "p_adj_t2_t3"=coefficient_df$p_adj)

knitr::kable(coef_df, row.names = FALSE)%>%
  kableExtra::kable_styling(font_size = 16)
```
